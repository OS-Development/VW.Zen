/** 
 * @file teapot.cpp
 * @brief teapot viewer helper library
 *
 * Copyright (C) 2012 arminweatherwax (at) lavabit.com
 * You can use it under the following license:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "teapot.h"
#include "lldir.h"


Teapot::Teapot()
{
}


Teapot::~Teapot()
{
	std::map<process_id_t, process_info>::const_iterator it = mProcessMap.begin();
	for(; it != mProcessMap.end(); it++)
	{
		process_info info = (*it).second;
		LLProcessLauncher* process = info.mLauncher;
		bool zombify = info.mZombify;
		if(!zombify && process->isRunning())
		{
			process->kill();
		}
	}

	mProcessMap.clear();
}

bool Teapot::launchNewViewer(const std::vector<std::string>& args)
{
	std::string executable, workingdir;
#if LL_LINUX
	executable = "teapot";
	workingdir = gDirUtilp->getAppRODataDir();
#elif LL_WINDOWS
	executable = gDirUtilp->getExecutablePathAndName();
	workingdir = gDirUtilp->getAppRODataDir();
#endif
	return loadExternalApplication(executable, workingdir, args, true);
}

bool Teapot::loadExternalApplication(const std::string& executable,
					const std::string& workingdir,
					const std::vector<std::string>& args,
					const bool zombify)
{

	llstat file_stat;
	if(LLFile::stat(executable, &file_stat))//file doesn't exist
	{
		return false;
	}

	bool ret = true;

	LLProcessLauncher* process = new LLProcessLauncher();
	process->setExecutable(executable);

	process->setWorkingDirectory(workingdir);

	std::vector<std::string>::const_iterator it = args.begin();
	for(; it != args.end(); it++)
	{
		process->addArgument(*it);
	}

	process->launch();

	if(process->isRunning())
	{
		process_id_t id;
#if LL_WINDOWS
		id = process->getProcessHandle();
#else
		id = process->getProcessID();
#endif
		process_info info;
		info.mLauncher = process;
		info.mZombify = zombify;
		std::pair<process_id_t, process_info> map_entry(id, info);
		mProcessMap.insert(map_entry);
	}
	else
	{
		delete process;
		ret = false;
	}

	return ret;
}
